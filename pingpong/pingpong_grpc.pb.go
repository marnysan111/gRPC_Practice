// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pingpong.proto

package pingpong

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PingPong_PingPong_FullMethodName             = "/pingpong.PingPong/PingPong"
	PingPong_PingPongServerStream_FullMethodName = "/pingpong.PingPong/PingPongServerStream"
	PingPong_PingPongClientStream_FullMethodName = "/pingpong.PingPong/PingPongClientStream"
	PingPong_PingPongBiStreams_FullMethodName    = "/pingpong.PingPong/PingPongBiStreams"
)

// PingPongClient is the client API for PingPong service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingPongClient interface {
	PingPong(ctx context.Context, in *PingReqest, opts ...grpc.CallOption) (*PingResponse, error)
	// ServerStreamingはreturnsにstreamをつける
	PingPongServerStream(ctx context.Context, in *PingReqest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PingResponse], error)
	// ClientStreamingは引数にstreamをつける
	PingPongClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PingReqest, PingResponse], error)
	// 双方向ストリーミングは両方にstreamをつける
	PingPongBiStreams(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PingReqest, PingResponse], error)
}

type pingPongClient struct {
	cc grpc.ClientConnInterface
}

func NewPingPongClient(cc grpc.ClientConnInterface) PingPongClient {
	return &pingPongClient{cc}
}

func (c *pingPongClient) PingPong(ctx context.Context, in *PingReqest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, PingPong_PingPong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingPongClient) PingPongServerStream(ctx context.Context, in *PingReqest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PingPong_ServiceDesc.Streams[0], PingPong_PingPongServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PingReqest, PingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingPong_PingPongServerStreamClient = grpc.ServerStreamingClient[PingResponse]

func (c *pingPongClient) PingPongClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PingReqest, PingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PingPong_ServiceDesc.Streams[1], PingPong_PingPongClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PingReqest, PingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingPong_PingPongClientStreamClient = grpc.ClientStreamingClient[PingReqest, PingResponse]

func (c *pingPongClient) PingPongBiStreams(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PingReqest, PingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PingPong_ServiceDesc.Streams[2], PingPong_PingPongBiStreams_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PingReqest, PingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingPong_PingPongBiStreamsClient = grpc.BidiStreamingClient[PingReqest, PingResponse]

// PingPongServer is the server API for PingPong service.
// All implementations must embed UnimplementedPingPongServer
// for forward compatibility.
type PingPongServer interface {
	PingPong(context.Context, *PingReqest) (*PingResponse, error)
	// ServerStreamingはreturnsにstreamをつける
	PingPongServerStream(*PingReqest, grpc.ServerStreamingServer[PingResponse]) error
	// ClientStreamingは引数にstreamをつける
	PingPongClientStream(grpc.ClientStreamingServer[PingReqest, PingResponse]) error
	// 双方向ストリーミングは両方にstreamをつける
	PingPongBiStreams(grpc.BidiStreamingServer[PingReqest, PingResponse]) error
	mustEmbedUnimplementedPingPongServer()
}

// UnimplementedPingPongServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPingPongServer struct{}

func (UnimplementedPingPongServer) PingPong(context.Context, *PingReqest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (UnimplementedPingPongServer) PingPongServerStream(*PingReqest, grpc.ServerStreamingServer[PingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PingPongServerStream not implemented")
}
func (UnimplementedPingPongServer) PingPongClientStream(grpc.ClientStreamingServer[PingReqest, PingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PingPongClientStream not implemented")
}
func (UnimplementedPingPongServer) PingPongBiStreams(grpc.BidiStreamingServer[PingReqest, PingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PingPongBiStreams not implemented")
}
func (UnimplementedPingPongServer) mustEmbedUnimplementedPingPongServer() {}
func (UnimplementedPingPongServer) testEmbeddedByValue()                  {}

// UnsafePingPongServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingPongServer will
// result in compilation errors.
type UnsafePingPongServer interface {
	mustEmbedUnimplementedPingPongServer()
}

func RegisterPingPongServer(s grpc.ServiceRegistrar, srv PingPongServer) {
	// If the following call pancis, it indicates UnimplementedPingPongServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PingPong_ServiceDesc, srv)
}

func _PingPong_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPongServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingPong_PingPong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPongServer).PingPong(ctx, req.(*PingReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingPong_PingPongServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingReqest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingPongServer).PingPongServerStream(m, &grpc.GenericServerStream[PingReqest, PingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingPong_PingPongServerStreamServer = grpc.ServerStreamingServer[PingResponse]

func _PingPong_PingPongClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingPongServer).PingPongClientStream(&grpc.GenericServerStream[PingReqest, PingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingPong_PingPongClientStreamServer = grpc.ClientStreamingServer[PingReqest, PingResponse]

func _PingPong_PingPongBiStreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingPongServer).PingPongBiStreams(&grpc.GenericServerStream[PingReqest, PingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingPong_PingPongBiStreamsServer = grpc.BidiStreamingServer[PingReqest, PingResponse]

// PingPong_ServiceDesc is the grpc.ServiceDesc for PingPong service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingPong_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pingpong.PingPong",
	HandlerType: (*PingPongServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _PingPong_PingPong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingPongServerStream",
			Handler:       _PingPong_PingPongServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingPongClientStream",
			Handler:       _PingPong_PingPongClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingPongBiStreams",
			Handler:       _PingPong_PingPongBiStreams_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pingpong.proto",
}
